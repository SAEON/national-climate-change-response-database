scalar DateTime
scalar JSON
scalar Void
scalar Money
scalar WKT_4326

type User {
  id: Int!
  emailAddress: String!
  name: String
  """
  User's are considered in the context of a tenant
  """
  context(tenantId: ID): [Tenant]!
}

type Tenant {
  id: ID!
  hostname: String!
  title: String
  shortTitle: String
  frontMatter: JSON!
  description: String
  theme: JSON!
  roles: [Role]!
  submissions: [Submission!]!
}

type Role {
  id: Int!
  name: String!
  description: String
  permissions: [Permission!]!
}

type Permission {
  id: Int!
  name: String!
  description: String
}

type ClientContext {
  id: ID!
  hostname: String!
  ipAddress: String
  userAgent: String
  origin: String
  isDefault: Boolean!
  title: String
  shortTitle: String
  frontMatter: JSON
  description: String
  logoUrl: String
  flagUrl: String
  theme: JSON
  region: Region
}

input ControlledVocabularyInput {
  root: String!
  tree: String!
  term: String!
}

type ControlledVocabulary {
  id: ID!
  term: String!
  children: [ControlledVocabulary!]
  tree: String!
  root: String!
  geometry(simplify: Boolean): WKT_4326
}

input VocabularyFilterInput {
  field: String!
  term: String!
}

input MitigationFiltersInput {
  ids: [Int!]
  vocabularyFilters: [VocabularyFilterInput!]
}

input AdaptationFiltersInput {
  ids: [Int!]
  vocabularyFilters: [VocabularyFilterInput!]
}

type FormLayout {
  generalDetails: JSON!
  mitigationDetails: JSON!
  adaptationDetails: JSON!
}

type Submission {
  id: ID!
  _id: Int
  isSubmitted: Boolean
  submissionStatus: JSON
  submissionComments: String
  project: JSON
  mitigation: JSON
  adaptation: JSON
  createdAt: DateTime
  createdBy: User
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  totalRecords: Int!
}

type Region {
  id: ID!
  name: String!
  centroid: WKT_4326
  geometry: WKT_4326!
  vocabulary: [ControlledVocabulary!]!
}

enum Migrations {
  FIND_INCORRECT_SUBMISSION_VOCABULARIES
  FIX_REVERSED_COORDINATES
  REFACTOR_YX_TO_XY
}

enum Chart {
  BASE_DATA_QUERY
  ESTIMATED_BUDGET
  FUNDING_SOURCE
  OPERATIONAL_PROJECTS_BY_YEAR
  POINT_LOCATIONS
  PROJECT_COUNT
  SECTOR_BUDGET
}

type Query {
  """
  Returns the SQL used in the fixVocabulary mutation to check on the UI
  """
  fixVocabularySql(term: String!, field: String!, incorrectTerm: String!): JSON!
  """
  Get all (distinct) terms of a particular tree
  """
  flattenedTree(treeName: String!): [String!]!
  """
  Get JSON describing UI form layout. Used for the web and Excel form
  """
  formLayout: FormLayout!
  """
  Get Report data for a particular visualization
  """
  chart(id: Chart!): JSON!
  """
  Get a list of submissions that seem to have bad data
  """
  incorrectSubmissionVocabularies(tenantId: Int!): JSON!
  """
  Retrieve the HTTP/Tenant information of the connecting client
  """
  clientContext: ClientContext!
  """
  Find geometries for region
  """
  regions(terms: [String!]!, simplify: Boolean): [Region!]!
  """
  Retrieve all tenanted versions of this deployment
  """
  tenants: [Tenant!]!
  """
  Get an in-progress form by the ID of the incomplete submission
  """
  submission(id: ID!, isSubmitted: Boolean): Submission
  """
  Page info (pagination) for a particular search
  """
  pageInfo(
    submissionStatus: String
    projectFilters: JSON
    mitigationFilters: JSON
    adaptationFilters: JSON
    isSubmitted: Boolean
    limit: Int
    offset: Int
  ): PageInfo!
  """
  Search submissions
  """
  submissions(
    submissionStatus: String
    projectFilters: JSON
    mitigationFilters: JSON
    adaptationFilters: JSON
    limit: Int
    offset: Int
    isSubmitted: Boolean
  ): [Submission!]!
  """
  Search vocabulary tress
  """
  controlledVocabulary(root: String, roots: [String!], tree: String!): [ControlledVocabulary]!
  """
  Search users
  """
  users(ids: [Int!]): [User!]
  user(id: Int!): User
  """
  Search roles
  """
  roles: [Role!]!
  """
  Search permissions
  """
  permissions: [Permission!]!
}

input TenantInput {
  hostname: String
  title: String
  shortTitle: String
  frontMatter: JSON
  description: String
  theme: JSON
}

input MigrationInput {
  tenantId: Int
}

type Mutation {
  """
  Run an 'update submissions ...' SQL query to update term values to correct terms
  """
  fixVocabulary(term: String!, field: String!, incorrectTerm: String!): Boolean!
  """
  Run scripts on the database. These scripts should
  be idempotent in case they are run multiple times
  """
  migrateDatabase(migration: Migrations!, input: MigrationInput): Boolean!
  """
  Update tenant
  """
  updateTenant(id: ID!, input: TenantInput!): Tenant
  """
  Delete tenant
  Returns a list of deleted tenant IDs
  """
  deleteTenants(ids: [ID!]!): [ID!]!
  """
  Create and update a submission
  """
  saveSubmission(
    submissionId: ID!
    project: JSON
    mitigation: JSON
    adaptation: JSON
    isSubmitted: Boolean
    submissionStatus: JSON
    submissionComments: String
  ): Submission
  createSubmission: Submission!
  deleteSubmission(id: ID!): ID!
  removeSubmissionAttachments(submissionId: ID!, ids: [Int!]!): JSON!
  """
  Assign roles to users
  """
  assignRolesToUser(input: [UserTenantRoleInput!]!): User!
}

input UserTenantRoleInput {
  userId: Int!
  tenantId: Int!
  roleIds: [Int!]!
}
